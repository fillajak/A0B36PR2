/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chebot.logic.Pieces;

import chebot.logic.Board;
import chebot.logic.LogicException;
import chebot.logic.Move;
import chebot.logic.Pieces.Piece;
import java.util.LinkedList;

/**
 *Represents one pieceon board. Has referece to board.
 * @author Dick
 */
public abstract class Piece {
    protected Side side;
    protected Position position;
    protected Board board;
    protected boolean out;
    protected LinkedList<DigVec> simpleMoves = new LinkedList<>();

    public Piece(Side side, Position position, Board board) {
        this.side = side;
        this.position = position;
        this.board = board;
        this.out = false;
    }

    public abstract PositionList getPositionsToMove();

    public Position getPosition() {
        return position;
    }
/**
 * Generates available postions, where can selected piece move. Moves generated by this method must be check before actual move
 * @return - positions 
 */
    protected final PositionList go() {

        Position next;
        Piece piece;
        PositionList res = new PositionList();


        for (DigVec d : simpleMoves) {
            next = position.clone();
            while (true) {
                try {
                    next = next.getNextMove(d);
                    System.out.println(next);
                    piece = board.getPieceList().get(next);
                    if (piece.side == this.side){
                        break;
                    }
                    if (piece.side != this.side){
                        res.add(next);
                        break;
                    }
                } catch (LogicException ex) {
                    if (ex.getCode() == LogicException.OUT_OF_FIELD_CODE) {
                        break;
                    }
                    if (ex.getCode() == LogicException.NO_PIECE_FOUND){
                       res.add(next);
                    }
                }
                if (d.getType() == Type.JUMP){
                    break;
                }
            }

        }
        return res;

    }

    @Override
    public String toString() {
        return side.getShrt()+position;
    }
}
